#--------------------------
# not a shell script.
# Caller should source this, e.g.
#      $ source bin/e2jk.env
#--------------------------

BIN_DIR=bin
SRC_DIR=src
set -u
# blow up on undefined env-vars.

#set -x
if [ -z "${E2JK_CONFIG+x}" ]; then
    echo "$0: ERROR (in e2jk.env):  E2JK_CONFIG is not defined, please set it to a suitable config.yml file" >&2
    echo "Example: \"export E2JK_CONFIG=bin/config_patas.yml\"" >&2
    exit 1
fi

# Caller needs to set the E2JK_CONFIG to the config file we should be using.
echo "$0: (in e2jk.env): calling flatten yaml on E2JK_CONFIG=\"$E2JK_CONFIG\"" >&2

echo ""
echo "--------------------------"
step="bin/fyml.sh ${E2JK_CONFIG}"
echo "$0: calling '$step'" >&2
# old: TMP_ENV=$( bin/fyml.sh ${E2JK_CONFIG} )
TMP_ENV=$( $step )
retcode=$?
if (( 0 != $retcode )); then
   echo "$0: ERROR: \"$step\" returned $retcode, aborting."
   exit 1
fi
echo "$0: after \"$step\" - ran ok"
echo "$0: TMP_ENV=\"$TMP_ENV\""
echo "$0: (in e2jk.env): TMP_ENV=$TMP_ENV"

# now source TMP_ENV to get current values for env-vars loaded.
#set -x
pwd
#ls -CF
source ./"$TMP_ENV"
retcode=$?
if (( 0 != $retcode )); then
   echo "$0: ERROR: \"$step\" returned $retcode, aborting."
   exit 1
fi
echo "$0: after \"$step\" - ran ok"
echo "$0: TMP_ENV=\"$TMP_ENV\""
echo "$0: (in e2jk.env): TMP_ENV=$TMP_ENV"
#set +x

